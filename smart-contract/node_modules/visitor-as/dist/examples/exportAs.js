"use strict";
const as_1 = require("../../as");
const utils_1 = require("../utils");
function getName(element) {
    let decorator = utils_1.getDecorator(element.declaration, "exportAs");
    if (decorator.args == null) {
        throw Error("exportAs expects a string argument but got null.");
    }
    if (decorator.args.length != 1) {
        throw Error(`exportAs expects 1 argument but got ${decorator.args.length}`);
    }
    if (!decorator.args[0].isLiteralKind(as_1.LiteralKind.STRING)) {
        throw Error("exportAs expects a string argument");
    }
    return decorator.args[0].value;
}
class Transformer extends as_1.Transform {
    afterInitialize(program) {
        let files = Array.from(program.filesByName.values()).filter((file) => utils_1.isUserEntry(file.source) && !utils_1.isLibrary(file.source));
        for (let file of files) {
            for (let _export of file.exports?.values() || []) {
                if (_export != null && utils_1.hasDecorator(_export, "exportAs")) {
                    let newName = getName(_export);
                    file.exports?.delete(_export.name);
                    file.exports?.set(newName, _export);
                }
            }
        }
    }
}
module.exports = Transformer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0QXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXhhbXBsZXMvZXhwb3J0QXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGlDQU1rQjtBQUNsQixvQ0FBOEU7QUFFOUUsU0FBUyxPQUFPLENBQUMsT0FBd0I7SUFDdkMsSUFBSSxTQUFTLEdBQUcsb0JBQVksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzlELElBQUksU0FBUyxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUU7UUFDMUIsTUFBTSxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQztLQUNqRTtJQUNELElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1FBQzlCLE1BQU0sS0FBSyxDQUFDLHVDQUF1QyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7S0FDN0U7SUFDRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsZ0JBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUN4RCxNQUFNLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0tBQ25EO0lBQ0QsT0FBaUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUUsQ0FBQyxLQUFLLENBQUM7QUFDNUQsQ0FBQztBQUVELE1BQU0sV0FBWSxTQUFRLGNBQVM7SUFDakMsZUFBZSxDQUFDLE9BQWdCO1FBQzlCLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FDekQsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLG1CQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQzlELENBQUM7UUFDRixLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRTtZQUN0QixLQUFLLElBQUksT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUNoRCxJQUFJLE9BQU8sSUFBSSxJQUFJLElBQUksb0JBQVksQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLEVBQUU7b0JBQ3hELElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDN0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNuQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7aUJBQ3ZDO2FBQ0Y7U0FDRjtJQUNILENBQUM7Q0FDRjtBQUVELGlCQUFTLFdBQVcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIExpdGVyYWxLaW5kLFxuICBTdHJpbmdMaXRlcmFsRXhwcmVzc2lvbixcbiAgUHJvZ3JhbSxcbiAgVHJhbnNmb3JtLFxuICBEZWNsYXJlZEVsZW1lbnQsXG59IGZyb20gXCIuLi8uLi9hc1wiO1xuaW1wb3J0IHsgZ2V0RGVjb3JhdG9yLCBoYXNEZWNvcmF0b3IsIGlzTGlicmFyeSwgaXNVc2VyRW50cnkgfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuZnVuY3Rpb24gZ2V0TmFtZShlbGVtZW50OiBEZWNsYXJlZEVsZW1lbnQpOiBzdHJpbmcge1xuICBsZXQgZGVjb3JhdG9yID0gZ2V0RGVjb3JhdG9yKGVsZW1lbnQuZGVjbGFyYXRpb24sIFwiZXhwb3J0QXNcIik7XG4gIGlmIChkZWNvcmF0b3IuYXJncyA9PSBudWxsKSB7XG4gICAgdGhyb3cgRXJyb3IoXCJleHBvcnRBcyBleHBlY3RzIGEgc3RyaW5nIGFyZ3VtZW50IGJ1dCBnb3QgbnVsbC5cIik7XG4gIH1cbiAgaWYgKGRlY29yYXRvci5hcmdzLmxlbmd0aCAhPSAxKSB7XG4gICAgdGhyb3cgRXJyb3IoYGV4cG9ydEFzIGV4cGVjdHMgMSBhcmd1bWVudCBidXQgZ290ICR7ZGVjb3JhdG9yLmFyZ3MubGVuZ3RofWApO1xuICB9XG4gIGlmICghZGVjb3JhdG9yLmFyZ3NbMF0uaXNMaXRlcmFsS2luZChMaXRlcmFsS2luZC5TVFJJTkcpKSB7XG4gICAgdGhyb3cgRXJyb3IoXCJleHBvcnRBcyBleHBlY3RzIGEgc3RyaW5nIGFyZ3VtZW50XCIpO1xuICB9XG4gIHJldHVybiAoPFN0cmluZ0xpdGVyYWxFeHByZXNzaW9uPmRlY29yYXRvci5hcmdzWzBdKS52YWx1ZTtcbn1cblxuY2xhc3MgVHJhbnNmb3JtZXIgZXh0ZW5kcyBUcmFuc2Zvcm0ge1xuICBhZnRlckluaXRpYWxpemUocHJvZ3JhbTogUHJvZ3JhbSk6IHZvaWQge1xuICAgIGxldCBmaWxlcyA9IEFycmF5LmZyb20ocHJvZ3JhbS5maWxlc0J5TmFtZS52YWx1ZXMoKSkuZmlsdGVyKFxuICAgICAgKGZpbGUpID0+IGlzVXNlckVudHJ5KGZpbGUuc291cmNlKSAmJiAhaXNMaWJyYXJ5KGZpbGUuc291cmNlKVxuICAgICk7XG4gICAgZm9yIChsZXQgZmlsZSBvZiBmaWxlcykge1xuICAgICAgZm9yIChsZXQgX2V4cG9ydCBvZiBmaWxlLmV4cG9ydHM/LnZhbHVlcygpIHx8IFtdKSB7XG4gICAgICAgIGlmIChfZXhwb3J0ICE9IG51bGwgJiYgaGFzRGVjb3JhdG9yKF9leHBvcnQsIFwiZXhwb3J0QXNcIikpIHtcbiAgICAgICAgICBsZXQgbmV3TmFtZSA9IGdldE5hbWUoX2V4cG9ydCk7XG4gICAgICAgICAgICBmaWxlLmV4cG9ydHM/LmRlbGV0ZShfZXhwb3J0Lm5hbWUpO1xuICAgICAgICAgICAgZmlsZS5leHBvcnRzPy5zZXQobmV3TmFtZSwgX2V4cG9ydCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0ID0gVHJhbnNmb3JtZXI7XG4iXX0=